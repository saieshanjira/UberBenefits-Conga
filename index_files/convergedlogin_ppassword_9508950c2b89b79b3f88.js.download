/*!
 * ------------------------------------------- START OF THIRD PARTY NOTICE -----------------------------------------
 * 
 * This file is based on or incorporates material from the projects listed below (Third Party IP). The original copyright notice and the license under which Microsoft received such Third Party IP, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft licenses the Third Party IP to you under the licensing terms for the Microsoft product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
 * 
 *   json2.js (2016-05-01)
 *   https://github.com/douglascrockford/JSON-js
 *   License: Public Domain
 * 
 * Provided for Informational Purposes Only
 * 
 * ----------------------------------------------- END OF THIRD PARTY NOTICE ------------------------------------------
 */
(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{505:function(e,n,t){var o=t(2),r=t(0),i=t(1),s=t(4),a=t(902),d=t(3),c=t(33),l=t(35),u=t(11).getInstance(window.ServerData),p=t(8),w=t(7),v=t(14),f=t(5),x=t(9),h=t(16),_=t(24);var b=window,k=d.String,T=r.PaginatedState,g=r.LoginMode,P=r.CredentialType,C=r.EstsError,m=i.Helper,S=a.GrctResultAction;function R(e){var n=this,r=e.serverData,i=e.serverError,d=e.isInitialView,c=e.username,b=e.displayName||"",R=e.hipRequiredForUsername,y=e.passwordBrowserPrefill,D=e.availableCreds||[],L=e.evictedCreds||[],E=e.defaultKmsiValue,I=e.userTenantBranding,F=e.sessions,B=e.callMetadata,A=e.flowToken,U=e.useEvictedCredentials,V=e.showCredViewBrandingDesc,W=e.supportsNativeCredentialRecovery,O=e.forgotPasswordText,H=e.accessRecoveryLink,N=e.boilerPlateText,M=e.hideAccountResetCredentials,q=r.str,K=r.iLoginMode,G=r.urlHIPScript,Z=r.sRemoteConnectAppName,j=r.fAllowCancel,J=r.urlSwitch,z=r.urlSkipZtd,$=r.fLockUsername,X=r.fShowSwitchUser,Y=r.fPOST_ForceSignin,Q=r.sZtdFriendlyName,ee=r.sZtdTenantName,ne=r.sZtdUpnHint,te=r.fShowButtons,oe=r.sErrorCode,re=r.fShowHipOnNewView,ie=(r.fLogSkipToOfflineAccountAction,r.fHideOfflineAccountWithNoSkipString,r.sUnauthSessionID),se=r.iRequestLCID,ae=r.sSiteId,de=r.sClientId,ce=r.sForwardedClientId,le=r.sNoPaBubbleVersion,ue=r.fShouldSupportTargetCredentialForRecovery,pe=r.urlResetPassword,we=r.fFixUrlResetPassword,ve=r.fEnableLivePreview,fe=!!r.fDeprecateHipLockout,xe=!1,he=null,_e=!1,be=!1,ke={},Te=null,ge={},Pe=!1,Ce=o.observable(!1),me=o.observable();function Se(){n.onSubmitReady()}function Re(e){n.isBackButtonVisible(e),n.onSetBackButtonState(te&&e)}function ye(e){return e.getResponseJson&&(e=e.getResponseJson()),{success:!0,userCode:e.UserCode,deviceCode:e.SessionLookupKey}}function De(){return n.setDefaultFocus(),{success:!1}}n.onSwitchView=s.create(),n.onSubmitReady=s.create(),n.onResetPassword=s.create(u.getDefaultEventTracingOptions(w.ClientTracingEventIds.ComponentEvent_LoginPaginatedPasswordView_onResetPassword,!0)),n.onRedirect=s.create(),n.onSetBackButtonState=s.create(),n.onSetPendingRequest=s.create(),n.onUpdateFlowToken=s.create(),n.onRestoreIsRecoveryAttemptPost=s.create(),n.passwordTextbox=new l(o.pureComputed((function(){var e;if(me())return me();if(!Ce())return e=i||null,i=null,e;return n.passwordTextbox.value()?null:q.CT_PWD_STR_Error_MissingPassword})),y),n.passwordTextbox.value.extend({logValue:u.getPasswordTextBoxPropertyLogOption(n,{eventId:w.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_Password})}),n.passwordTextbox.error.extend({logValue:u.getPropertyLogOption(n,{eventId:w.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_ClientError})}),n.hipInterface=o.observable(),n.isKmsiChecked=o.observable(E).extend({logValue:u.getPropertyLogOption(n,{eventId:w.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_KMSI})}),n.isRequestPending=o.observable(!1),n.unsafe_username=o.observable(),n.showTileLogo=o.observable(!1),n.isBackButtonVisible=o.observable(!1),n.secondaryButtonText=o.observable(),n.useEvictedCredentials=o.observable(U),n.showPassword=o.observable(!1),n.shouldHipInit=o.observable(!1),n.tenantBranding=null,n.unsafe_displayName=null,n.username=c,n.unsafe_passwordAriaLabel=null,n.hasRemoteNgc=!1,n.availableCreds=D,n.evictedCreds=L,n.allowPhoneDisambiguation=!1,n.unsafe_pageDescription=null,n.unsafe_pageTitle=null,n.unsafe_skipZTDLinkText=null,n.isInitialView=d,n.showHipOnPasswordView=!1,n.showChangeUserLink=!1,n.callMetadata=B,n.flowToken=A,n.showCredViewBrandingDesc=V,n.supportsNativeCredentialRecovery=W,n.hideForgotMyPassword=!1,n.unsafe_forgotPasswordText=q.STR_SSSU_ForgotPassword||q.CT_PWD_STR_ForgotPwdLink_Text,n.hidePasswordReset=!1,n.accessRecoveryLink=null,n.resetPasswordUrl=null,n.boilerPlateText=null,u.attachViewLoadClientTracingOptions(n,{eventId:w.ClientTracingEventIds.Event_LoginPaginatedPasswordView_onLoad}),n.saveSharedData=function(e){var t=ke.result;e.remoteNgcParams.requestSent=!1,e.useEvictedCredentials=_e||n.useEvictedCredentials(),e.password=n.passwordTextbox.value(),e.showCredViewBrandingDesc=!1,e.remoteLoginUserCode=t?t.userCode:null,e.remoteLoginDeviceCode=t?t.deviceCode:null,ue?e.targetCredentialForRecovery=Pe?P.Password:P.None:e.isRecoveryAttemptPost=Pe,he&&(e.otcCredential=he),Pe&&(e.recoveryCredentialsData=ge)},n.getState=function(){return{isKmsiChecked:n.isKmsiChecked(),useEvictedCredentials:n.useEvictedCredentials(),grctRequestHelperState:W?Te.getState():null}},n.restoreState=function(e){e&&(n.isKmsiChecked(e.isKmsiChecked),n.useEvictedCredentials(e.useEvictedCredentials),W&&Te.restoreState(e.grctRequestHelperState))},n.setDefaultFocus=function(){n.passwordTextbox.focused(!0)},n.primaryButton_onClick=function(){var e=n.hipInterface();if(!xe&&!n.isRequestPending())if(Ce(!0),e&&e.enableValidation(),null===n.passwordTextbox.error())if(e){if(null!==e.getError())return void e.focus();xe=!0,e.verify((function(){xe=!1,Se()}))}else be&&re?n.onSwitchView(T.Hip):Se();else n.setDefaultFocus()},n.secondaryButton_onClick=function(){n.onSwitchView(T.Previous)},n.phoneDisambiguation_onClick=function(){n.onSwitchView(T.PhoneDisambiguation)},n.resetPassword_onClick=function(){if(W){var e=m.htmlUnescape(b);n.isRequestPending(!0),n.onSetPendingRequest(!0),x.throwUnhandledExceptionOnRejection(Te.sendAsync(e,A,P.Password).then((function(e){switch(n.isRequestPending(!1),n.onSetPendingRequest(!1),e.flowToken&&(A=e.flowToken,n.onUpdateFlowToken(e.flowToken)),e.action){case S.ShowError:me(e.error),n.setDefaultFocus();break;case S.SwitchView:ge=o.utils.extend(e.sharedData,e.viewParams||{}),Pe=!0,n.onSwitchView(e.viewId)}})))}else n.onResetPassword(b)},n.selectAccount_onClick=function(){$&&J?n.onRedirect({url:J,eventOptions:{eventId:p.EventIds.Redriect_SwitchUser}}):n.onSwitchView(F.length?T.Tiles:T.Username)},n.hip_onHipLoad=function(){n.isRequestPending(!1),null!==n.passwordTextbox.error()&&n.setDefaultFocus()},n.skip_onClick=function(){null},n.switchToRemoteNGC_onClick=function(){n.onSwitchView(T.RemoteNGC)},n.skipZtd_onClick=function(){n.onRedirect({url:z,eventOptions:{eventId:p.EventIds.Redirect_SkipZeroTouch}})},n.privacy_onClick=function(){n.onSwitchView(T.ViewAgreement)},n.tileLogo_onLoad=function(){n.showTileLogo(!0)},n.desktopSso_onSuccess=function(){n.onSubmitReady()},n.switchToEvictedCredPicker_onClick=function(){_e=!0,n.onSwitchView(T.CredentialPicker)},n.credSwitchLink_onSwitchView=function(e,t,o){o&&(he=o),n.onSwitchView(e,t)},n.credSwitchLink_onSetPendingRequest=function(e){n.onSetPendingRequest(e),n.isRequestPending(e)},n.credSwitchLink_onUpdateFlowToken=function(e){e&&(A=e,n.onUpdateFlowToken(e))},n.remoteLogin_onClick=function(){var e;x.throwUnhandledExceptionOnRejection((e=h.Purpose.XboxRemoteConnect,function(e){return new f((function(n,t){new _({purpose:e,flowToken:A,unauthSessionId:ie,lcid:se,siteId:ae,clientId:de,forwardedClientId:ce,noPaBubbleVersion:le,successCallback:n,failureCallback:t}).sendRequest()}))}(e).then(ye,De)).then((function(e){e.success&&(ke.result=e,n.onSwitchView(T.RemoteLoginPolling))})))},function(){var e=m.htmlUnescape(b);if(n.unsafe_username(m.htmlUnescape(c)),n.unsafe_displayName=o.observable(e).extend({preventExternalWrite:null}),n.allowPhoneDisambiguation=!$&&!k.isEmailAddress(b)&&!k.isSkypeName(b)&&k.isPhoneNumber(b),n.hasRemoteNgc=!!o.utils.arrayFirst(D,(function(e){return e.credType===P.RemoteNGC})),be=!!G&&c===R,n.showHipOnPasswordView=be&&!re&&!fe,n.showChangeUserLink=X&&($&&J||d),n.tenantBranding=I,Z&&d?n.unsafe_pageDescription=k.format(q.CT_PWD_STR_RemoteConnect_PasswordPage_Desc,Z,e):K===g.ForceSignin||K===g.ForceSigninMobile||K===g.ForceSigninHost||Y?n.unsafe_pageDescription=function(e,n){switch(e){case C.SsoArtifactExpiredDueToConditionalAccess:return q.WF_STR_ASLP_Info;case C.SsoArtifactExpiredDueToConditionalAccessReAuth:return q.WF_STR_ReAuth_Info;default:return k.format(q.WF_STR_ForceSI_Info,n)}}(oe,e):q.CT_PWD_STR_EnterPassword_Desc&&(n.unsafe_pageDescription=k.format(q.CT_PWD_STR_EnterPassword_Desc,e)),ne&&ee){var i=m.htmlUnescape(ee);n.unsafe_pageTitle=Q?k.format(q.CT_Win10_PwdWithOrgDomain_AndFriendlyName,m.htmlUnescape(Q),i):k.format(q.CT_Win10_STR_Pwd_Title_WithOrgDomain,i),n.unsafe_skipZTDLinkText=k.format(q.CT_Win10_STR_Pwd_StartOver_WithOrgDomain,i)}else n.unsafe_pageTitle=q.CT_PWD_STR_EnterYourPassword_Title,n.unsafe_skipZTDLinkText=q.CT_Win10_STR_StartOver;if(n.unsafe_passwordAriaLabel=k.format(q.CT_PWD_STR_PwdTB_AriaLabel,e),n.showHipOnPasswordView&&n.isRequestPending(!0),n.unsafe_displayName.subscribe((function(){setTimeout((function(){n.passwordTextbox.value(null)}),0)})),d?j&&Re(!0):Re(!0),G&&n.showHipOnPasswordView&&t.e(1).then(function(){t(1438),n.shouldHipInit(!0)}.bind(null,t))["catch"](t.oe),I){var s=v.getLayoutTemplateConfig(I);I.ForgotPasswordText&&(n.unsafe_forgotPasswordText=m.htmlUnescape(I.ForgotPasswordText)),n.accessRecoveryLink=I.AccessRecoveryLink,n.hideForgotMyPassword=s.hideAccountResetCredentials,n.hidePasswordReset=s.hideAccountResetCredentials}W?(Te=new a(r),n.onRestoreIsRecoveryAttemptPost(),we&&(n.resetPasswordUrl=n.accessRecoveryLink)):we&&(n.resetPasswordUrl=n.accessRecoveryLink||pe),ve&&(n.unsafe_forgotPasswordText=m.htmlUnescape(O()),n.accessRecoveryLink=H,n.hideForgotMyPassword=M,n.boilerPlateText=m.htmlUnescape(N()))}()}c.applyExtenders(o),o.components.register("login-paginated-password-view",{viewModel:R,template:t(903),synchronous:!b.ServerData.iMaxStackForKnockoutAsyncComponents||i.Helper.isStackSizeGreaterThan(b.ServerData.iMaxStackForKnockoutAsyncComponents),enableExtensions:!0}),e.exports=R},902:function(e,n,t){var o=t(0),r=t(5),i=t(3),s=t(12),a=t(8),d=i.String,c=i.Object,l=o.CredentialType,u=o.ApiErrorCodes,p=o.EstsError,w=o.PaginatedState,v=x.GrctResultAction={ShowError:1,SwitchView:2},f=x.GrctRequestHelperFlags={DisableAutoSend:1};function x(e,n){var t=this,x={},h=e,_=0!=(n&f.DisableAutoSend),b=h.str,k=h.fCheckApiCanary,T=h.urlGetRecoveryCredentialType,g=h.arrProofData||{},P=h.fIsRestrictedWsi;function C(e){e.proof.str={},c.extend(e.proof.str,g[e.proof.type]||{})}function m(e){var n={};if(e&&e.error)switch(e.error.code){case u.AuthFailure:n=y(b.CT_PWD_STR_Error_FlowTokenExpired);break;case p.TenantDoesNotSupportNativeCredentialRecovery:case p.UserDoesNotSupportNativeCredentialRecovery:case p.CredentialDoesNotSupportNativeRecovery:n=y(b.CT_PWD_STR_Error_CredentialDoesNotSupportNativeRecovery);break;default:n=y(b.CT_PWD_STR_Error_GetRecoveryCredentialTypeError)}else n=y(b.CT_PWD_STR_Error_GetRecoveryCredentialTypeError);return n.flowToken=e.FlowToken||null,n}function S(e){var n=e.Credentials,t=null;return n&&(t=n.PrefCredential),t}function R(e,n){return{action:v.SwitchView,viewId:e,viewParams:n}}function y(e,n,t){return{action:v.ShowError,error:e,isBlockingError:n,bypassCache:t}}t.sendAsync=function(e,n,i){var c=d.cleanseUsername(e,!0),u=x[c]?x[c]:null,p=u||function(e,n){return new r((function(t,r){new s({checkApiCanary:k}).Json({url:T,eventId:a.EventIds.Api_GetRecoveryCredentialType},{targetCredential:e,flowToken:n},t,r,o.DefaultRequestTimeout)}))}(i,n);return r.all([p]).then((function(e){var n=e[0];return function(e,n){var o={},r=t.getGrctSharedData(e,n);(o=function(e){var n=S(e);if(P&&!(e.Credentials.HasPassword||e.Credentials.HasGoogleFed||e.Credentials.HasCertAuth||e.Credentials.HasFido||e.Credentials.HasRemoteNGC||e.Credentials.HasPhone||e.Credentials.HasFacebookFed)&&n!==l.AccessPass)return R(w.MoreInfo);switch(n){case l.OneTimeCode:var t=w.OneTimeCodeRecovery;return _&&(t=w.ConfirmSend),R(t);default:return y(b.CT_PWD_STR_Error_GetRecoveryCredentialTypeError,!1,!0)}}(n)).flowToken=n.FlowToken||null,o.bypassCache||(x[e]=n,x[e].FlowToken=null);return o.sharedData=r,o}(c,n)}),m)},t.getState=function(){return{cache:x}},t.restoreState=function(e){e&&(x=e.cache||{})},t.getGrctSharedData=function(e,n){var t={},o=S(n);return t.preferredCredential=o,t.availableRecoveryCreds=function(e,n){var t=[];if(g[PROOF.Type.Email]){var o=function(e,n){var t=[];if(S(n)===l.OneTimeCode){var o={credType:l.OneTimeCode,proof:{display:e,data:d.cleanseUsername(e),otcSent:!0,isEncrypted:!1,isDefault:!0,isNopa:!0,type:PROOF.Type.Email}};t.push(o)}return t}(e,n);o.length>0&&(i.Array.forEach(o,C),t=t.concat(o))}return t}(e,n),o===l.OneTimeCode&&(t.otcCredential=i.Array.first(t.availableRecoveryCreds,(function(e){return e.credType===l.OneTimeCode&&e.proof.otcSent}))),t.otcParams={requestSent:o===l.OneTimeCode},t}}e.exports=x},903:function(e,n,t){e.exports="\x3c!-- "+(t(36),t(13),t(34),' --\x3e\n\n\x3c!--  --\x3e\n\n<div aria-hidden="true">\n    <input type="hidden" name="i13" data-bind="value: isKmsiChecked() ? 1 : 0" />\n\n    \x3c!-- ko if: svr.fIsUpdatedAutocompleteEnabled --\x3e\n    <input type="hidden" name="login" autocomplete="username" data-bind="value: unsafe_username" />\n    \x3c!-- /ko --\x3e\n    \x3c!-- ko ifnot: svr.fIsUpdatedAutocompleteEnabled --\x3e\n    <input type="hidden" name="login" data-bind="value: unsafe_username" />\n    \x3c!-- /ko --\x3e\n\n    \x3c!-- The loginfmt input type is different as some password managers require it to be of type text.\n        Since screen readers might not hide this input, a parent div with aria-hidden true has been added. --\x3e\n    <input type="text" name="loginfmt" data-bind="moveOffScreen, value: unsafe_displayName" />\n    <input type="hidden" name="type"\n        data-bind="value: svr.fUseWizardBehavior ? ')+t(0).PostType.PasswordInline+" : "+t(0).PostType.Password+'" />\n    <input type="hidden" name="LoginOptions"\n        data-bind="value: isKmsiChecked() ? '+t(7).LoginOption.RememberPWD+" : "+t(7).LoginOption.NothingChecked+'" />\n    <input type="hidden" name="lrt" data-bind="value: callMetadata.IsLongRunningTransaction" />\n    <input type="hidden" name="lrtPartition" data-bind="value: callMetadata.LongRunningTransactionPartition" />\n    <input type="hidden" name="hisRegion" data-bind="value: callMetadata.HisRegion" />\n    <input type="hidden" name="hisScaleUnit" data-bind="value: callMetadata.HisScaleUnit" />\n</div>\n\n<div id="loginHeader" class="row" data-bind="externalCss: { \'title\': true }">\n    <div role="heading" aria-level="1" data-bind="text: str[\'CT_PWD_STR_EnterPassword_Title\']"></div>\n</div>\n\n\x3c!-- ko if: showCredViewBrandingDesc --\x3e\n<div class="row text-body">\n    <div id="credViewBrandingDesc" class="wrap-content" data-bind="text: str[\'WF_STR_Default_Desc\']"></div>\n</div>\n\x3c!-- /ko --\x3e\n\n\x3c!-- ko if: unsafe_pageDescription --\x3e\n<div class="row text-body">\n    <div id="passwordDesc" class="wrap-content" data-bind="text: unsafe_pageDescription"></div>\n</div>\n\x3c!-- /ko --\x3e\n\n<div class="row">\n    <div class="form-group col-md-24">\n        <div role="alert" aria-live="assertive">\n            \x3c!-- ko if: passwordTextbox.error --\x3e\n              \x3c!-- ko if: svr.fFixUrlResetPassword --\x3e\n              <div id="passwordError" data-bind="\n                  externalCss: { \'error\': true },\n                  htmlWithBindings: passwordTextbox.error,\n                  childBindings: {\n                      \'idA_IL_ForgotPassword0\': {\n                          href: resetPasswordUrl || \'#\',\n                          attr: {\n                              target: accessRecoveryLink && \'_blank\',\n                              role: resetPasswordUrl ? \'link\' : \'button\',\n                          },\n                          click: accessRecoveryLink ? null : resetPassword_onClick } }"></div>\n              \x3c!-- /ko --\x3e\n              \x3c!-- ko ifnot: svr.fFixUrlResetPassword --\x3e\n              <div id="passwordError" data-bind="\n                  externalCss: { \'error\': true },\n                  htmlWithBindings: passwordTextbox.error,\n                  childBindings: {\n                      \'idA_IL_ForgotPassword0\': {\n                          href: accessRecoveryLink || svr.urlResetPassword,\n                          attr: {\n                              target: accessRecoveryLink && \'_blank\',\n                              role: supportsNativeCredentialRecovery ? \'button\' : \'link\'\n                          },\n                          click: accessRecoveryLink ? null : resetPassword_onClick } }"></div>\n              \x3c!-- /ko --\x3e\n            \x3c!-- /ko --\x3e\n        </div>\n\n        <div class="placeholderContainer" data-bind="component: { name: \'placeholder-textbox-field\',\n            publicMethods: passwordTextbox.placeholderTextboxMethods,\n            params: {\n                serverData: svr,\n                hintText: str[\'CT_PWD_STR_PwdTB_Label\'] },\n            event: {\n                updateFocus: passwordTextbox.textbox_onUpdateFocus } }">\n\n            <input name="passwd" type="password" id="i0118" class="form-control" aria-required="true" data-bind="\n                attr: { autocomplete: svr.fIsUpdatedAutocompleteEnabled ? \'current-password\' : \'off\'},\n                textInput: passwordTextbox.value,\n                ariaDescribedBy: [\n                    \'loginHeader passwordError\',\n                    showCredViewBrandingDesc ? \'credViewBrandingDesc\' : \'\',\n                    unsafe_pageDescription ? \'passwordDesc\' : \'\'].join(\' \'),\n                hasFocusEx: passwordTextbox.focused() && !showPassword(),\n                placeholder: $placeholderText,\n                ariaLabel: unsafe_passwordAriaLabel,\n                moveOffScreen: showPassword,\n                externalCss: {\n                    \'input\': true,\n                    \'text-box\': true,\n                    \'has-error\': passwordTextbox.error }" />\n\n            \x3c!-- ko if: svr.fUsePasswordPeek && showPassword() --\x3e\n            <input type="text" autocomplete="off" class="form-control" aria-required="true" data-bind="\n                textInput: passwordTextbox.value,\n                ariaDescribedBy: [\n                    \'loginHeader\',\n                    showCredViewBrandingDesc ? \'credViewBrandingDesc\' : \'\',\n                    unsafe_pageDescription ? \'passwordDesc\' : \'\'].join(\' \'),\n                hasFocusEx: true,\n                placeholder: $placeholderText,\n                ariaLabel: unsafe_passwordAriaLabel,\n                externalCss: {\n                    \'input\': true,\n                    \'text-box\': true,\n                    \'has-error\': passwordTextbox.error }" />\n            \x3c!-- /ko --\x3e\n        </div>\n\n        \x3c!-- ko if: svr.fUsePasswordPeek --\x3e\n        <div class="checkbox no-margin-bottom">\n            <label>\n                <input id="ShowHidePasswordCheckbox" type="checkbox" data-bind="checked: showPassword, ariaLabel: str[\'CT_PWD_STR_ShowPasswordAriaLabel\']" />\n                <span id="ShowHidePasswordLabel" data-bind="text: str[\'CT_PWD_STR_ShowPasswordLabel\']"></span>\n            </label>\n        </div>\n        \x3c!-- /ko --\x3e\n    </div>\n</div>\n\n\x3c!-- ko if: shouldHipInit --\x3e\n<div data-bind="component: { name: \'hip-field\',\n    publicMethods: hipInterface,\n    params: {\n        str: str,\n        onDemandVerify: true,\n        hasServerError: svr.fHIPError,\n        useFake: svr.fUseFakeHIP },\n    event: {\n        hipLoad: hip_onHipLoad } }">\n</div>\n\x3c!-- /ko --\x3e\n\n<div data-bind="css: { \'position-buttons\': !tenantBranding.BoilerPlateText && !boilerPlateText }, externalCss: { \'password-reset-links-container\': true }">\n    <div>\n        \x3c!-- ko if: svr.fShowPersistentCookiesWarning --\x3e\n        <div class="row text-body">\n            <div id="swv-warning" class="wrap-content" data-bind="text: str[\'CT_PWD_STR_PersistentCookies_Warning\']"></div>\n        </div>\n        \x3c!-- /ko --\x3e\n        \x3c!-- ko if: svr.fKMSIEnabled !== false && !svr.fShowPersistentCookiesWarning && !tenantBranding.KeepMeSignedInDisabled --\x3e\n        <div id="idTd_PWD_KMSI_Cb" class="form-group checkbox text-block-body no-margin-top" data-bind="visible: !svr.fLockUsername && !showHipOnPasswordView">\n            <label id="idLbl_PWD_KMSI_Cb">\n                <input name="KMSI" id="idChkBx_PWD_KMSI0Pwd" type="checkbox" data-bind="checked: isKmsiChecked, ariaLabel: str[\'CT_PWD_STR_KeepMeSignedInCB_Text\']" />\n                <span data-bind="text: str[\'CT_PWD_STR_KeepMeSignedInCB_Text\']"></span>\n            </label>\n        </div>\n        \x3c!-- /ko --\x3e\n\n        <div class="row">\n            <div class="col-md-24">\n                <div class="text-13">\n                    \x3c!-- ko if: svr.urlSkipZtd && svr.sZtdUpnHint --\x3e\n                    <div class="form-group">\n                        <a id="idSkipZtdLink" name="switchToOfflineAccount" href="#" data-bind="\n                            text: unsafe_skipZTDLinkText,\n                            click: skipZtd_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko ifnot: hideForgotMyPassword --\x3e\n                    <div class="form-group">\n                        \x3c!-- ko if: svr.fFixUrlResetPassword --\x3e\n                        <a id="idA_PWD_ForgotPassword" data-bind="\n                            text: unsafe_forgotPasswordText,\n                            href: resetPasswordUrl || \'#\',\n                            attr: {\n                              target: accessRecoveryLink && \'_blank\',\n                              role: resetPasswordUrl ? \'link\' : \'button\'\n                            },\n                            click: accessRecoveryLink ? null : resetPassword_onClick"></a>\n                        \x3c!-- /ko --\x3e\n                        \x3c!-- ko ifnot: svr.fFixUrlResetPassword --\x3e\n                        <a id="idA_PWD_ForgotPassword" role="link" href="#" data-bind="\n                            text: unsafe_forgotPasswordText,\n                            href: accessRecoveryLink || svr.urlResetPassword,\n                            attr: { target: accessRecoveryLink && \'_blank\' },\n                            click: accessRecoveryLink ? null : resetPassword_onClick"></a>\n                        \x3c!-- /ko --\x3e\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko if: allowPhoneDisambiguation --\x3e\n                    <div class="form-group">\n                        <a id="switchToPhoneDisambiguation" href="#" data-bind="text: str[\'WF_STR_ThisIsntMyNumber_Text\'], click: phoneDisambiguation_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko ifnot: useEvictedCredentials --\x3e\n                        \x3c!-- ko component: { name: "cred-switch-link-control",\n                            params: {\n                                serverData: svr,\n                                username: username,\n                                availableCreds: availableCreds,\n                                flowToken: flowToken,\n                                currentCred: { credType: '+t(0).CredentialType.Password+' } },\n                            event: {\n                                switchView: credSwitchLink_onSwitchView,\n                                redirect: onRedirect,\n                                setPendingRequest: credSwitchLink_onSetPendingRequest,\n                                updateFlowToken: credSwitchLink_onUpdateFlowToken } } --\x3e\n                        \x3c!-- /ko --\x3e\n\n                        \x3c!-- ko if: evictedCreds.length > 0 --\x3e\n                        <div class="form-group">\n                            <a id="evictedAccount" href="#" data-bind="text: str[\'CT_PWD_STR_SwitchToCredPicker_Link_EvictedAcct\'], click: switchToEvictedCredPicker_onClick"></a>\n                        </div>\n                        \x3c!-- /ko --\x3e\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko if: showChangeUserLink --\x3e\n                    <div class="form-group">\n                        <a id="i1668" href="#" data-bind="text: str[\'CT_FED_STR_ChangeUserLink_Text\'], click: selectAccount_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class="win-button-pin-bottom" data-bind="css : { \'boilerplate-button-bottom\': tenantBranding.BoilerPlateText || boilerPlateText }">\n    <div class="row" data-bind="css: { \'move-buttons\': tenantBranding.BoilerPlateText || boilerPlateText }">\n        <div data-bind="component: { name: \'footer-buttons-field\',\n            params: {\n                serverData: svr,\n                primaryButtonText: str[\'CT_PWD_STR_SignIn_Button\'],\n                isPrimaryButtonEnabled: !isRequestPending(),\n                isPrimaryButtonVisible: svr.fShowButtons,\n                isSecondaryButtonEnabled: true,\n                isSecondaryButtonVisible: false },\n            event: {\n                primaryButtonClick: primaryButton_onClick } }">\n        </div>\n    </div>\n</div>\n\n\x3c!-- ko if: tenantBranding.BoilerPlateText || boilerPlateText--\x3e\n<div id="idBoilerPlateText" class="wrap-content" data-bind="\n    htmlWithMods: svr.fEnableLivePreview ? boilerPlateText : tenantBranding.BoilerPlateText,\n    htmlMods: { filterLinks: svr.fIsHosted },\n    css: { \'transparent-lightbox\': tenantBranding.UseTransparentLightBox },\n    externalCss: { \'boilerplate-text\': true }"></div>\n\x3c!-- /ko --\x3e\n'}}]),window.__convergedlogin_ppassword_9508950c2b89b79b3f88=!0;
//# sourceMappingURL=../9508950c2b89b79b3f88.map